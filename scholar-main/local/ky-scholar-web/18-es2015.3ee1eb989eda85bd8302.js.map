{"version":3,"sources":["webpack:///src/app/routes/system-manage/admin-security/admin-security.service.ts","webpack:///src/app/routes/system-manage/admin-security/admin-security.component.html","webpack:///src/app/routes/system-manage/system-manage-routing.module.ts","webpack:///src/app/routes/system-manage/admin-security/admin-security.component.ts","webpack:///src/app/routes/system-manage/system-manage.module.ts"],"names":["AdminSecurityService","httpService","params","this","post","isCommonHttpHeader","postBody","telphone","code","routes","path","component","AdminSecurityComponent","router","fb","message","menuService","adminSecurityService","isLoading","oldPassword","adminInfo","userName","sendPhoneDisabled","time","isFirstGetCode","isPassLoading","oldCode","confirmationValidator","control","value","passwordForm","controls","newPassword","confirm","error","required","group","confirmPassword","getAdminInfo","getUser","id","subscribe","result","status","data","err","create","JSON","stringify","getVerCode","changePhoneDisabled","interval","window","setInterval","clearInterval","key","markAsDirty","updateValueAndValidity","valid","get","sendModifyPassword","password","phone","navigateByUrl","Promise","resolve","then","goBack","e","keyCode","sureModifyPass","formKeydown","updateConfirmValidator","title","SettingRoutingModule","forChild","SystemManageModule"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpService } from 'core/services/http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminSecurityService {\r\n\r\n  constructor(private httpService: HttpService) { }\r\n  // 获取管理员信息\r\n  getAdminInfo(params: any): Observable<any> {\r\n    const url = 'sys/user/get';\r\n    const options = { isCommonHttpHeader: true };\r\n    return this.httpService.post(url, params, options);\r\n  }\r\n\r\n  // 用户修改密码\r\n  sendModifyPassword(params: any): Observable<any> {\r\n    const url = 'sys/user/modifyPass';\r\n    const options = { isCommonHttpHeader: true };\r\n    return this.httpService.postBody(url, params, options);\r\n  }\r\n  // 用户修改手机\r\n  sendModifyPhone(params: any): Observable<any> {\r\n    const url = 'sys/user/updatePhone';\r\n    const options = { isCommonHttpHeader: true };\r\n    return this.httpService.post(url, params, options);\r\n  }\r\n\r\n  // 获取验证码\r\n  getVerCode(telphone: string): Observable<any> {\r\n    const params = {telphone};\r\n    const url = 'third/sms/sendCode';\r\n    const options = { isCommonHttpHeader: true };\r\n    return this.httpService.post(url, params, options);\r\n  }\r\n  // 校验验证码\r\n  checkCode(code, telphone): Observable<any> {\r\n    const params = {code, telphone};\r\n    const url = 'third/sms/checkCode';\r\n    const options = { isCommonHttpHeader: true };\r\n    return this.httpService.post(url, params, options);\r\n  }\r\n}\r\n","<div class=\"list-container\">\r\n\t<nz-spin [nzSpinning]=\"isLoading\" [nzDelay]=\"0\">\r\n\t\t<div class=\"list-header\">\r\n\t\t\t<div class=\"title\">\r\n\t\t\t\t修改密码\r\n\t\t\t</div>\r\n\t\t\t<div class=\"btn-groud\">\r\n\t\t\t\t<button nz-button (click)=\"goBack()\">返回</button>\r\n\t\t\t\t<button nz-button nzType=\"primary\" (click)=\"sureModifyPass()\" [nzLoading]=\"isPassLoading\">确认修改</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<form nz-form [formGroup]=\"passwordForm\" (keydown)=\"formKeydown($event)\" style=\"max-width: 500px;\" autocomplete=\"new-password\">\r\n\t\t\t<nz-form-item>\r\n\t\t\t\t<nz-form-label  style=\"width: 120px;\" nzRequired>手机号码</nz-form-label>\r\n\t\t\t\t<nz-form-control [nzSpan]=\"18\">\r\n\t\t\t\t\t{{adminInfo.telphone}}\r\n\t\t\t\t</nz-form-control>\r\n\t\t\t</nz-form-item>\r\n\t\t\t<nz-form-item>\r\n\t\t\t\t<nz-form-label style=\"width: 120px;\" nzRequired>验证码</nz-form-label>\r\n\t\t\t\t<nz-form-control [nzSpan]=\"13\" nzHasFeedback nzErrorTip=\"验证码不能为空\" style=\"margin-right: 10px;\">\r\n\t\t\t\t\t<input nz-input formControlName=\"code\" autocomplete=\"new-password\" placeholder=\"请输入验证码\"/>\r\n\t\t\t\t</nz-form-control>\r\n\t\t\t\t<button nz-button nzType=\"primary\"\r\n\t\t\t\t\t*ngIf=\"!sendPhoneDisabled\"\r\n\t\t\t\t\t(click)=\"getVerCode()\">\r\n\t\t\t\t\t{{isFirstGetCode ? '发送验证码' : '重新发送'}}\r\n\t\t\t\t</button>\r\n\t\t\t\t<button nz-button *ngIf=\"sendPhoneDisabled\">\r\n\t\t\t\t\t重新发送({{time}}s)\r\n\t\t\t\t</button>\r\n\t\t\t</nz-form-item>\r\n\t\t\t<nz-form-item>\r\n\t\t\t\t<nz-form-label style=\"width: 120px;\" nzRequired>新密码</nz-form-label>\r\n\t\t\t\t<nz-form-control [nzSpan]=\"18\" nzHasFeedback nzErrorTip=\"新密码不能为空\">\r\n\t\t\t\t\t<input nz-input type=\"password\" formControlName=\"newPassword\" placeholder=\"请输入新密码\" autocomplete=\"new-password\" (ngModelChange)=\"updateConfirmValidator()\"/>\r\n\t\t\t\t</nz-form-control>\r\n\t\t\t</nz-form-item>\r\n\t\t\t<nz-form-item>\r\n\t\t\t\t<nz-form-label style=\"width: 120px;\" nzRequired>确认新密码</nz-form-label>\r\n\t\t\t\t<nz-form-control [nzSpan]=\"18\" nzHasFeedback [nzErrorTip]=\"errorTpl\">\r\n\t\t\t\t\t<input nz-input type=\"password\" formControlName=\"confirmPassword\" autocomplete=\"new-password\" placeholder=\"请确认密码\"/>\r\n\t\t\t\t\t<ng-template #errorTpl let-control>\r\n\t\t\t\t\t\t<ng-container *ngIf=\"control.hasError('required')\">\r\n\t\t\t\t\t\t\t请确认密码\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t<ng-container *ngIf=\"control.hasError('confirm')\">\r\n\t\t\t\t\t\t\t两次密码输入不一致\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</ng-template>\r\n\t\t\t\t</nz-form-control>\r\n\t\t\t</nz-form-item>\r\n\t\t</form>\r\n\t</nz-spin>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AdminSecurityComponent } from './admin-security/admin-security.component';\r\nimport {NoFoundComponent} from '../../../../layout/404/404.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'admin-security', component: AdminSecurityComponent },\r\n  {\r\n    path: '**',\r\n    component: NoFoundComponent,\r\n    data: { title: '404' }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router} from '@angular/router'; // 导入router服务\r\nimport { NzMessageService } from 'ng-zorro-antd/message';\r\nimport { LocalStorageUtil } from 'core/utils/localstorage.util';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { AdminSecurityService } from './admin-security.service';\r\nimport { MenuService } from 'core/services/menu.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-security',\r\n  templateUrl: './admin-security.component.html',\r\n  styleUrls: ['./admin-security.component.less'],\r\n  providers: [AdminSecurityService]\r\n})\r\nexport class AdminSecurityComponent implements OnInit {\r\n  isLoading = false;\r\n  // 密码修改框是否打开\r\n  passwordForm: FormGroup;\r\n  // 旧密码，用于密码修改比较\r\n  oldPassword = '';\r\n  // 管理员信息\r\n  adminInfo: any = {\r\n    userName: '',\r\n    telphone: ''\r\n  };\r\n\r\n  sendPhoneDisabled = false;\r\n  time = 60;\r\n  // 是否第一次获取验证码\r\n  isFirstGetCode = true;\r\n\r\n  isPassLoading = false;\r\n  oldCode = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private message: NzMessageService,\r\n    private menuService: MenuService,\r\n    private adminSecurityService: AdminSecurityService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.passwordForm = this.fb.group({\r\n      newPassword: ['', [Validators.required]],\r\n      confirmPassword: ['', [Validators.required, this.confirmationValidator]],\r\n      code: ['', [Validators.required]]\r\n    });\r\n    this.getAdminInfo();\r\n  }\r\n\r\n  // 获取管理员信息\r\n  getAdminInfo() {\r\n    this.isLoading = true;\r\n    this.adminInfo = LocalStorageUtil.getUser();\r\n    const success = (result: any) => {\r\n      if (result.status === 200) {\r\n        this.isLoading = false;\r\n        this.adminInfo = result.data;\r\n      }\r\n    };\r\n\r\n    const error = (err: any) => {\r\n      this.isLoading = false;\r\n      this.message.create('error', JSON.stringify(err));\r\n    };\r\n    this.adminSecurityService.getAdminInfo({\r\n      id: LocalStorageUtil.getUser().id\r\n    }).subscribe(success, error);\r\n  }\r\n\r\n  // 获取手机验证码\r\n  getVerCode() {\r\n    this.isLoading = true;\r\n    const success = (result: any) => {\r\n      this.isLoading = false;\r\n      if (result.status === 201) {\r\n        this.changePhoneDisabled();\r\n      }\r\n    };\r\n\r\n    const error = (err: any) => {\r\n      this.isLoading = false;\r\n      this.message.create('error', JSON.stringify(err));\r\n    };\r\n    this.adminSecurityService.getVerCode(this.adminInfo.telphone).subscribe(success, error);\r\n  }\r\n\r\n  // 重新获取倒计时\r\n  changePhoneDisabled() {\r\n    if (this.sendPhoneDisabled) {\r\n      return false;\r\n    }\r\n    this.sendPhoneDisabled = true;\r\n    const interval = window.setInterval(() => {\r\n      if ((this.time--) <= 0) {\r\n        this.time = 60;\r\n        this.sendPhoneDisabled = false;\r\n        window.clearInterval(interval);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n\r\n  // 保存修改密码，弹出获取手机验证码框\r\n  modifyPassword() {\r\n    // tslint:disable-next-line:forin\r\n    for (const key in this.passwordForm.controls) {\r\n      this.passwordForm.controls[key].markAsDirty();\r\n      this.passwordForm.controls[key].updateValueAndValidity();\r\n    }\r\n    if (this.passwordForm.valid) {\r\n      if ( this.passwordForm.get('password').value !== this.oldPassword ) {\r\n        this.message.create('error', '旧密码不正确，请重新输入');\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 最终的保存密码\r\n  sureModifyPass() {\r\n    if (!this.passwordForm.valid) {\r\n      this.message.create('error', '请按规则填写所有项');\r\n      return false;\r\n    }\r\n\r\n    this.isPassLoading = true;\r\n\r\n    const params = {\r\n      password: this.passwordForm.value.newPassword,\r\n      phone: this.adminInfo.telphone,\r\n      code: this.passwordForm.value.code\r\n    };\r\n    const success = (result: any) => {\r\n      this.isPassLoading = false;\r\n      if (result.status === 201) {\r\n        this.message.create('success', '修改密码成功！请重新登录');\r\n        this.router.navigateByUrl('/p/login');\r\n      }\r\n    };\r\n\r\n    const error = (err: any) => {\r\n      this.isPassLoading = false;\r\n      this.message.create('error', JSON.stringify(err));\r\n    };\r\n    this.adminSecurityService.sendModifyPassword(params).subscribe(success, error);\r\n  }\r\n  // 确认两次密码是否一致\r\n  updateConfirmValidator(): void {\r\n    Promise.resolve().then(() => this.passwordForm.controls.confirmPassword.updateValueAndValidity());\r\n  }\r\n\r\n  // 确认两次密码是否一致\r\n  confirmationValidator = (control: FormControl): { [s: string]: boolean } => {\r\n    if (!control.value) {\r\n      return { required: true };\r\n    } else if (control.value !== this.passwordForm.controls.newPassword.value) {\r\n      return { confirm: true, error: true };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  goBack() {\r\n    this.menuService.goBack();\r\n  }\r\n\r\n  pwdFocus(e) {\r\n    // e.target.setAttribute('type', 'password');\r\n  }\r\n\r\n  formKeydown(e: any) {\r\n    if (e.keyCode === 13) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { SettingRoutingModule } from './system-manage-routing.module';\r\nimport { AdminSecurityComponent } from './admin-security/admin-security.component';\r\n\r\nconst COMPONENTS = [\r\n  AdminSecurityComponent\r\n];\r\n\r\nconst COMPONENTS_NOROUNT = [];\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    SettingRoutingModule,\r\n  ],\r\n  declarations: [...COMPONENTS, ...COMPONENTS_NOROUNT],\r\n  entryComponents: COMPONENTS_NOROUNT,\r\n})\r\nexport class SystemManageModule { }\r\n"]}