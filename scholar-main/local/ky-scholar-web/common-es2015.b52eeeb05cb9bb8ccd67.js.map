{"version":3,"sources":["webpack:///src/app/busi-services/tiku.service.ts"],"names":["TikuService","http","id","this","get","getHttpOptions","uuid","tkurlArr","paperApi","split","substr","url","options","data","postBody","params","pointCodes","uid","paperUuid","examId","code","questionBankGateway","pipe","res","orginalData","caterys","forEach","item","accountingList","child","putCaterysTree","putOrginalCaterysTree","console","log","error","paperUuids","examIds","isReturnDetail","coursePacketId","busType","userId","sublibraryModuleId","courseCode","questionBankApi","jsonParam","sublibraryId","sectionIds","pid","typeId","subModules","pageSize","curPage"],"mappings":"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","file":"x","sourcesContent":["import { environment } from '../../environments/environment';\r\nimport { HttpService } from 'core/services/http.service';\r\nimport { Injectable} from '@angular/core';\r\nimport { ToolsUtil } from 'core/utils/tools.util';\r\nimport { LocalStorageUtil } from 'core/utils/localstorage.util';\r\nimport { map } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TikuService {\r\n\r\n  constructor(private http: HttpService) {\r\n  }\r\n\r\n  getStage(id) {\r\n    return this.http.get(`pkg/coursePacketConfig/getExamDayStage`, {id}, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n  getPaperUrl(uuid: string): string {\r\n    const tkurlArr = environment.paperApi.split('/');\r\n    const tkurl = `${tkurlArr[0]}//${tkurlArr[2]}`;\r\n    return tkurl + '/p/' + uuid.substr(0, 1) + '/' + uuid + '.json';\r\n  }\r\n\r\n  getSubModule(id) {\r\n    const url = 'pkg/coursePacketQuebank/list?coursePacketId=' + id;\r\n    const options = ToolsUtil.getHttpOptions();\r\n    return this.http.get(url, {}, options);\r\n  }\r\n\r\n  // 更新目标做题分数\r\n  updateTheTargetScore(data) {\r\n    const url = `stu/studyTimeSection/updateTimeSectionScore`;\r\n    return this.http.postBody(url, data, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n// 更新阶段做题分数\r\n  updateTheStageScore(data) {\r\n    const url = `stu/studyTimeSection/updateTimeScore`;\r\n    return this.http.postBody(url, data, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n\r\n  updateUuid(params) {\r\n    return this.http.postBody(`pkg/courseSection/saveSectionLearnUUID`, params, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n  getPaperInfo(params) {\r\n    return this.http.get(`smart/adaptiveLearning/generateAdaptiveExam`, params, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n  replyToTestPaperInformation(uuid) {\r\n    return this.http.get(`smart/adaptiveLearning/getAdaptivePaperByUuid`, {uuid}, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n  getStatePass(id) {\r\n    return this.http.get(`stu/studyTimeSection/getIsPassByStateId/${id}`, {}, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n\r\n  getAimsPass(id) {\r\n    return this.http.get(`stu/studyTimeSection/getIsPassByTimeSectionId/${id}`, {}, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n  getKnowledgePointsDetail(pointCodes) {\r\n    return this.http.get(`stu/studentKnowledge/selectExperienceValuesByPointCodes`, {pointCodes}, ToolsUtil.getHttpOptions());\r\n  }\r\n\r\n  submitPaper(params: any) {\r\n    const url = `${environment.paperApi}api/submitPaper`;\r\n    const options = {};\r\n    return this.http.postBody(url, params, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  //  录播目标闯关记录更新\r\n  goalBreakthrough(params: { studyTimeSectionId: string, isPass: 0 | 1, passScore: number }) {\r\n    return this.http.postBody(\r\n      `stu/studyTimeSection/updateTimeSectionStatus`,\r\n      params,\r\n      ToolsUtil.getHttpOptions()\r\n    );\r\n  }\r\n\r\n  //  录播阶段测验记录更新\r\n  stageTest(params: { stageId: string, isPass: 0 | 1, passScore: number }) {\r\n    return this.http.postBody(\r\n      `stu/studyTimeSection/updateTimeStatus`,\r\n      params,\r\n      ToolsUtil.getHttpOptions()\r\n    );\r\n  }\r\n\r\n  /** 获取最新的已做题记录 */\r\n  getExamedRecord(uid: number, paperUuid: string, examId: string) {\r\n    const url = `${environment.paperApi}api/getExamedRecord`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, paperUuid, examId }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  /** 获取服务器缓存的做题记录(2天) */\r\n  getMemExamedRecord(uid: number, paperUuid: string, examId: string) {\r\n    const url = `${environment.paperApi}api/getMemExamedRecord`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, paperUuid, examId }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  /** 获取历史的已做题记录 */\r\n  getHistoryExamedRecord(uid: number, paperUuid: string, examId: string) {\r\n    const url = `${environment.paperApi}api/getHistoryExamedRecord`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, paperUuid, examId }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  getDetailsOfKnowledgePoints(code) {\r\n    const url = 'res/knowledge-point/detailByCode/' + code;\r\n    const options = ToolsUtil.getHttpOptions();\r\n    return this.http.get(url, {}, options);\r\n  }\r\n\r\n  /** 获取科目, 用于分录题 */\r\n  getAccountingCaterysTree() {\r\n    // const cacheCaterys = LocalStorageUtil.getCaterysTree();\r\n    // if (cacheCaterys) {\r\n    //   return of({ code: 200, data: cacheCaterys });\r\n    // }\r\n    const options = ToolsUtil.getHttpOptions();\r\n    return this.http.get(`${environment.questionBankGateway}tkApi/qkcPaper/getAccountingCaterysTree`, {}, options).pipe(\r\n      map(res => {\r\n        if (res.code === 200) {\r\n          const orginalData = res.data || [];\r\n          const caterys: any = {};\r\n          orginalData.forEach(item => {\r\n            item.accountingList.forEach(child => {\r\n              caterys[child.code] = child;\r\n            });\r\n          });\r\n          LocalStorageUtil.putCaterysTree(caterys);\r\n          LocalStorageUtil.putOrginalCaterysTree(orginalData);\r\n          console.log('获取题目字典成功');\r\n          return { code: 200, data: caterys };\r\n        } else {\r\n          console.error('获取题目字典失败');\r\n          return { code: 400, data: {}};\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /** 收藏习题 */\r\n  collectExecrise(params: any) {\r\n    const url = `${environment.paperApi}api/myCollection/saveOrUpdate`;\r\n    const options = {};\r\n    return this.http.postBody(url, params, options);\r\n  }\r\n\r\n  /** 取消收藏习题 */\r\n  cancelCollectExecrise(params: any) {\r\n    const url = `${environment.paperApi}api/myCollection/cancel`;\r\n    const options = {};\r\n    return this.http.get(url, params, options);\r\n  }\r\n\r\n  /** 获取多份试卷收藏的题目\r\n   * @param uid 学生ID\r\n   * @param paperUuids 试卷UUIDS，如:uuid1,uuid2,..\r\n   */\r\n  getCollectionByUidPids(uid: number, paperUuids: string) {\r\n    const url = `${environment.paperApi}api/myCollection/findByUidPids`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, paperUuids }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  /** 获取单份试卷收藏的题目\r\n   * @param uid 学生ID\r\n   * @param paperUuids 试卷UUID\r\n   */\r\n  getCollectionByUidPid(uid: number, paperUuid: string) {\r\n    const url = `${environment.paperApi}api/myCollection/findByUidPid`;\r\n    const options = {};\r\n    return this.http.get(url, { uid, paperUuid }, options);\r\n  }\r\n\r\n  /** 获取多份试卷错误的题目\r\n   * @param uid 学生ID\r\n   * @param paperUuids 试卷UUIDS，如:uuid1,uuid2,..\r\n   * @param examIds 考试IDS\r\n   * @param isReturnDetail 是否返回错题明细（默认为是）：0为否，1为是;\r\n   */\r\n  getSublibraryPraticeErrorRedo(uid: number, paperUuids: string, examIds: string, isReturnDetail: number) {\r\n    const url = `${environment.paperApi}api/sublibraryPraticeErrorRedo`;\r\n    const options = {};\r\n    let params = {};\r\n    // if (examIds) {\r\n    //   params = { uid, paperUuids, examIds };\r\n    // } else {\r\n    //   params = { uid, paperUuids };\r\n    // }\r\n    params = { uid, paperUuids, examIds, isReturnDetail };\r\n    return this.http.postBody(url, params, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  getErrorExecrise(uid: number, paperUuids: string, examIds?: string) {\r\n    const url = `${environment.paperApi}api/praticeErrorRedo`;\r\n    const options = {};\r\n    let params = {};\r\n    if (examIds) {\r\n      params = { uid, paperUuids, examIds };\r\n    } else {\r\n      params = { uid, paperUuids };\r\n    }\r\n    return this.http.postBody(url, params, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  listCoursePacketQuebank(coursePacketId: string, busType: string = '1') {\r\n    const url = 'pkg/coursePacketQuebank/list';\r\n    const options = ToolsUtil.getHttpOptions();\r\n    return this.http.get(url, { coursePacketId, busType }, options);\r\n  }\r\n\r\n  practice(userId: number, sublibraryModuleId: string, courseCode: string) {\r\n    const url = `${environment.questionBankApi}tkApi/seeai/sublibrary/practice`;\r\n    const options = {};\r\n    return this.http.get(url, { userId, sublibraryModuleId, courseCode }, options);\r\n  }\r\n\r\n  complianceRate(jsonParam: any) {\r\n    const url = `${environment.paperApi}api/complianceRate`;\r\n    const options = {};\r\n    return this.http.postBody(url, jsonParam, options);\r\n  }\r\n\r\n  getPaperStatisticInfo(uid: number, paperUuids: string) {\r\n    const url = `${environment.paperApi}api/getPaperStatisticInfo`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, paperUuids }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  sublibraryComplianceRate(jsonParam: any) {\r\n    const url = `${environment.paperApi}api/sublibraryComplianceRate`;\r\n    const options = {};\r\n    return this.http.postBody(url, jsonParam, options);\r\n  }\r\n\r\n  getSubPaperStatisticInfo(uid: number, paperUuids: string, sublibraryId: number) {\r\n    const url = `${environment.paperApi}api/getSubPaperStatisticInfo`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, paperUuids, sublibraryId}, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  getCollectionByUidSectionIds(uid: number, sectionIds: string) {\r\n    const url = `${environment.paperApi}api/myCollection/findByUidSectionIds`;\r\n    const options = {};\r\n    return this.http.postBody(url, { uid, sectionIds }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  getExamRecordByPage(pid: number, uid: number, typeId: number, subModules: string, pageSize: number, curPage: number) {\r\n    const url = `${environment.paperApi}api/getExamRecordByPage`;\r\n    const options = {};\r\n    return this.http.postBody(url, { pid, uid, typeId, subModules, pageSize, curPage }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  getChapterSectionByPaperUuid(paperUuids: string[]) {\r\n    const url = `${environment.questionBankApi}/tkApi/seeai/sublibrary/paperUuid`;\r\n    const options = {};\r\n    return this.http.postBody(url, paperUuids, options);\r\n  }\r\n\r\n  getCourseChapter(courseCode: string) {\r\n    const url = `${environment.questionBankApi}/tkApi/seeai/sublibrary/courseChapter`;\r\n    const options = {};\r\n    return this.http.get(url, { courseCode }, options);\r\n  }\r\n\r\n  getExam(userId: number, sublibraryModuleId: string) {\r\n    const url = `${environment.questionBankApi}/tkApi/seeai/sublibrary/exam`;\r\n    const options = {};\r\n    return this.http.get(url, { userId, sublibraryModuleId }, options);\r\n  }\r\n\r\n  getExamErrorRedo(pid: number, uid: number, typeId: number, subModules: string, pageSize: number, curPage: number) {\r\n    const url = `${environment.paperApi}api/examErrorRedo`;\r\n    const options = {};\r\n    return this.http.postBody(url, { pid, uid, typeId, subModules, pageSize, curPage }, options, {'Content-Type': 'Multipart/form-data'});\r\n  }\r\n\r\n  updateExamStatus(userId: number, examId: string) {\r\n    const url = `${environment.questionBankApi}/tkApi/seeai/sublibrary/updateExamStatus`;\r\n    const options = {};\r\n    return this.http.get(url, { userId, examId }, options);\r\n  }\r\n\r\n}\r\n"]}